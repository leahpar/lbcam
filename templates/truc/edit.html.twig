{% extends 'base.html.twig' %}

{% block body %}

    <style>
        .dz-filename {
            display: none;
        }
        .dz-size {
            display: none;
        }
        .dz-message {
            display: block !important;
        }
        .dz-preview:hover .dz-image img {
            transform: scale(1) !important;
            -webkit-filter: blur(0px) !important;
            filter: blur(0px) !important;
        }
    </style>
    <form method="post">

        {{ form_widget(form._token) }} {# Hidden #}

        {{ form_errors(form) }}

        <p>
            {{ form_label(form.nom, 'Nom du truc') }}
            {{ form_widget(form.nom) }}
        </p>
        <p>
            {{ form_label(form.description, 'Description du truc') }}
            {{ form_widget(form.description) }}
        </p>
        <p>
            {{ form_label(form.tags, 'tags') }}
            {{ form_widget(form.tags) }}
        </p>

        <button type="submit">Enregistrer</button>
        {% if not truc.publie %}
        <button type="submit" name="publier" value="true">Enregistrer et publier</button>
        {% endif %}

    </form>

    <h2>Les images de mon truc</h2>
    <form action="{{ path('truc_add_image', {'slug': truc.slug}) }}" class="dropzone" id="my-dropzone">
    </form>

{% endblock %}

{% block javascripts %}
    <script>

    // TOM-SELECT
    new TomSelect('#truc_tags', {
        create: true,
        createOnBlur: true,
        plugins: {
            remove_button:{
                title:'Remove this item',
            }
        },
        'options': [
            {% for tag in tags %}
                {value: '{{ tag.nom }}', text: '{{ tag.nom }}'},
            {% endfor %}
        ],
    });


    // DROPZONE
    Dropzone.autoDiscover = false
    const myDropzone = new Dropzone("#my-dropzone", {
        paramName: "file",
        parallelUploads: 5,
        acceptedFiles: "image/*",
        maxFilesize: 10, // MB

        //capture: "camera",

        addRemoveLinks: true,

        dictCancelUpload: "Annuler",
        dictRemoveFile: "Supprimer",
        dictRemoveFileConfirmation: "Supprimer l'image ?",
        dictDefaultMessage: "Cliquez ou dÃ©posez des photos ici pour les ajouter",

        init: function() {
            {% for image in truc.images %}
                this.displayExistingFile({
                    name: '{{ image.filename }}',
                    image_id: '{{ image.id }}',
                }, '{{ asset('images/' ~ image.filename) }}');
            {% endfor %}
        }
    });

    myDropzone.on('complete', (file) => {
        //console.log('complete', file);
        const image = JSON.parse(file.xhr.response).image;
        file.image_id = image.id;
    });

    myDropzone.on('removedfile', (file) => {
        //console.log('removedfile', file);
        const url = '{{ path('truc_del_image', {slug: truc.slug, id: "XX"}) }}'.replace('XX', file.image_id);
        fetch(url, {method: 'DELETE'})
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(e => console.log(e));
    });

    </script>
{% endblock %}
